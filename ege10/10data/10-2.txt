



Дзюба Д.В., Крылов С.С.










АВТОМАТИЗИРОВАННОЕ МОДЕЛИРОВАНИЕ 
ПРОГРАММНЫХ СИСТЕМ

Учебное пособие
     




















Москва, 2002


									© Д.В. Дзюба, С.С. Крылов


     
     Введение
      
      Потребность в формализованных средствах анализа и проектирования 
обусловлена возросшей сложностью создаваемых человеком систем. Для обеспечения 
управляемости и эффективного функционирования такой системы необходимо чётко 
представлять её структуру и поведение. Эта задача решается с помощью различных 
методологий проектирования и анализа, применение которых наиболее актуально для 
разработки программных систем, поскольку она требует математической точности 
описаний, пригодных для машинного исполнения.
      Под программной системой (ПС) понимается [1] совокупность программ и 
сведений, требуемых для их эксплуатации, предназначенная для решения определенного 
круга задач. 
      Наибольший практический интерес представляют индустриально 
организованные ПС, которые характеризуются:
      1.	Длительным временем эксплуатации;
      2.	Сравнительно широким кругом пользователей, результат работы которых 
зависит от нормального функционирования программных средств;
      3.	Коммерческой ценностью.
      Примерами таких систем могут служить системы контроля за реальными 
процессами (грузоперевозки, химический синтез), информационно-поисковые системы, 
системы программирования, офисные пакеты.
      Согласно [2] разработка индивидуальных («малых») проектов отличается от 
индустриально организованных («больших») следующими признаками:
      
«малые» проекты
«большие» проекты
      Код разрабатывается 
единственным программистом или, 
возможно, небольшой группой 
программистов. Отдельно взятый 
индивидуум может понять все аспекты 
проекта, от и до.
      Программная система разрабатывается 
большой командой программистов. При этом 
одна группа может заниматься 
проектированием (или спецификацией) 
системы, другая — осуществлять написание 
кода отдельных компонент, а третья — 
объединять фрагменты в конечный продукт. 
Нет единственного человека, который знал бы 
все о проекте.
      Основная проблема при 
разработке состоит в проектировании 
программы и написании алгоритмов 
для решения поставленной задачи.
      Основная проблема в процессе 
разработки — управление проектом и обмен 
информацией между группами и внутри 
групп.
      
      В настоящее время наблюдается тенденция «глобализации» программных 
проектов, то есть увеличение среди разрабатываемых и эксплуатируемых программ 
количества сложных интегрированных программных систем, компоненты которых 
распределены между рабочими местами. Далее рассматриваются, главным образом, 
индустриально организованные ПС.
      Индустриально организованным ПС присуща сложность, определяемая шестью 
основными причинами [1],[3] 
      1.	Сложностью постановки решаемой задачи (неформальные, неявные, 
противоречивые требования);
      2.	Сложностью поведения системы, связанной со случайным характером 
внешних воздействий, большим числом состояний системы и связей между ними;
      3.	Сложностью описания поведения отдельных подсистем;
      4.	Сложностью управления процессом коллективной разработки (ПС не 
создаются одиночками, следовательно, возникают проблемы связи между 
разработчиками, синхронизации их действий, обеспечения целостности и 
непротиворечивости проекта);
      5.	Сложностью обеспечения открытости ПС (ПС для этого должна 
соответствовать различным стандартам).
      6.	Сложностью обеспечения гибкой архитектуры ПС. Гибкость необходима, 
поскольку требования к системе могут изменяться на всем протяжении ее жизненного 
цикла.
      
      Один из основных способов преодоления сложности - разбиение системы на более 
простые подсистемы, т.е. декомпозиция системы, порождающая иерархию абстракций.
      Следуя Г. Бучу [4] выделим два вида декомпозиции:
      
      1.	Алгоритмическая. Главное - порядок событий, функциональность. 
Исторически более ранний вид декомпозиции, соответствовал возможностям и задачам 
ранних ЭВМ, по сути более близок архитектуре фон-Неймановских машин. 
      2.	Объектно-ориентированная. Система понимается как совокупность 
взаимодействующих объектов, относящимся к различным категориям (классам) и 
обладающих свойствами и поведением т.е. реакцией на внешние воздействия. Объекты 
что-то делают, и мы можем, послав им сообщение, попросить их выполнить некоторые 
действия. Так как такая декомпозиция основана на объектах, а не на алгоритмах, она 
называется объектно-ориентированной. 
      
      Для построения функциональных моделей разработано значительное количество 
методологий. Одной из наиболее распространенных является методология SADT, которая 
и рассматривается в данном пособии. Также излагаются основы методологии UML, 
являющейся фактическим стандартом объектного моделирования. Для обеих методологий 
приводятся примеры их использования для решения учебной задачи. 
      
      
     Методология SADT
      
      Первоочередной проблемой, возникающей перед разработчиками при 
проектировании ПС, является анализ предметной области, выявление целей и ключевых 
закономерностей ее функционирования. Качество выполнения этого этапа во многом 
определяет успех или неуспех проекта в целом, поскольку ошибки, допускаемые на 
ранних стадиях разработки системы обходятся особенно дорого. Результаты анализа 
желательно фиксировать таким образом, чтобы соблюдался баланс между степенью 
формализации предметной области и наглядностью представления. Для этой цели удобно 
использовать некоторую стандартизованную графическую нотацию, разумеется, в 
сочетании с текстовыми комментариями. На практике в качестве средства 
предварительного описания предметной области более двадцати лет широко и успешно 
применяется методология SADT - Structured Analysis and Design Technique (Технология 
структурного анализа и проектирования), включающая наглядные графические средства 
и подход к описанию систем. Часть этой методологии, связанная с функциональным 
моделированием, известна под названием IDEF0 – сокращение от ICAM (Integrated 
Computer Aided Manufacturing - интегрированная компьютеризация производства) 
DEFinition. Предварительное описание предметной области часто основывается на 
функциональном SADT моделировании с помощью SADT- диаграмм. Почему для 
предварительного описания часто используется функциональное, а не объектное 
моделирование? Это обусловлено несколькими причинами:
      
      1. Для данного этапа проектирования характерно интенсивное взаимодействие 
разработчиков с экспертами в предметной области в ходе совместного построения и 
обсуждения модели. Эксперты в предметной области как правило не имеют (да и не 
обязаны иметь) навыков работы со сложными методами моделирования, но нуждаются в 
средствах формализации знаний. Практика показывает, что во многих случаях 
методология SADT является оптимальным компромиссом между сложностью изучения 
методологии неспециалистами в системном анализе, выразительностью и 
информационной насыщенностью модели.
      2. Функциональные модели часто более понятны неспециалистам, чем объектные. 
Это обусловлено исторически сложившимся преобладанием описаний систем в терминах 
функций, входов и выходов над объектными описаниями в технической документации, 
учебной литературе и других традиционных источниках знаний о большинстве 
предметных областей. Такая ситуация не может не сказываться на менталитете экспертов, 
и с этим нужно считаться.
      3. При предварительном анализе функции и взаимосвязи между ними часто легче 
выявить чем классы и их взаимоотношения.
      4. Выявленные функции и потоки данных между ними впоследствии удобно 
использовать как основу объектной декомпозиции.
      5. Графический язык SADT содержит всего один примитив для представления 
действия (блок) и один примитив (дугу) для выражения связи между блоками.
      	
      Влиятельным фактором распространения SADT являются некоторые 
корпоративные и государственные стандарты ряда стран, в первую очередь CША, 
предписывающие использование этой методологии в определенных категориях проектов.
      
      
      Модель
      
      SADT-модель должна давать полное, точное и адекватное описание системы, 
имеющее конкретное назначение. Это назначение, называемое целью модели, следует из 
формального определения модели в SADT [3]: М есть модель системы S, если М может 
быть использована для получения ответов на вопросы относительно S с требуемой 
точностью. Множество возможных вопросов определяется выбранной при 
моделировании точкой зрения на систему. Например, модель завода, построенная с точки 
зрения главного бухгалтера, ориентированная на финансовые потоки и документооборот, 
будет существенно отличаться от модели того же завода, созданной с точки зрения 
начальника производства и совсем не будет похожа на модель функционирования завода 
с точки зрения ночного сторожа (например, он может представлять завод как 
огороженное пространство, изобилующее материальными ценностями и их 
потенциальными расхитителями). Заметим, что во многих случаях SADT-модели 
реальных предметных областей имеют самостоятельную практическую (в том числе 
коммерческую) ценность, поскольку они могут быть использованы для реинжиниринга 
или, скажем, обучения персонала. 
      Основная часть SADT-модели системы представляет собой набор диаграмм, 
объединенный в древовидную структуру. Каждая диаграмма представляет собой 
описание некоторой четко ограниченной функции данной системы на определенном 
уровне абстракции. Диаграмма в корне дерева соответствует наиболее абстрактному 
описанию системы, ясно выражающему свободную от деталей концепцию системы с 
заданной точки зрения. Она называется контекстной диаграммой. Диаграммы дочерних 
вершин детализируют диаграмму родительской вершины. Диаграммы терминальных 
вершин соответствуют максимальному уровню детализации. Пример дерева диаграмм 
приведен в приложении С.
      В SADT-модель входят также текстовые описания и комментарии.
      
      
      Диаграмма
      
      На SADT-диаграмме располагаются блоки и ориентированные дуги. Диаграмма 
составляется на стандартном бланке, в котором предусмотрены поля для названия, автора, 
наименования проекта, даты составления или изменения и другой стандартной 
информации.
      
 
      
      Блоки изображают функции моделируемой системы. Дуги связывают блоки вместе 
и отображают взаимодействия и взаимосвязи между ними. Методология SADT 
рекомендует, чтобы на диаграмме находилось не менее трех и не более шести блоков. 
Исключением является диаграмма самого высокого уровня, которая всегда содержит один 
блок, выражающий обобщенную функцию системы. Правило «от трех до шести» было 
получено эмпирическим путем. Считается, что диаграмма из двух блоков слишком 
тривиальна, а из семи и более – сложна для понимания. Выбор числа семь в качестве 
границы косвенно подкрепляется некоторыми рекомендациями из области организации 
управления, согласно которым наличие у начальника более шести заместителей 
исключает эффективную координацию их действий. Если на диаграмме получается более 
шести блоков, то следует либо укрупнить некоторые из них, либо пересмотреть структуру 
дерева диаграмм.
      Блоки изображаются прямоугольниками. Название представляемой блоком 
функции пишется внутри блока обычно в неопределенной глагольной форме («выписать 
ордер», «проверить и утвердить баланс», «загрузить управляющую программу», 
«загерметизировать швы» и т.д.). Дуги располагаются и нумеруются на диаграмме вдоль 
диагонали из левого верхнего угла в правый нижний. Меньший номер соответствует 
более высокой степени доминирования блока. Доминирование блока может быть 
обусловлено тем, что его функция выполняется ближе к началу последовательного 
процесса или важностью его функции. Например, доминирующим может быть блок, 
содержащий функции управления выполнением работы. Порядковый номер блока 
пишется в углу прямоугольника и используется для ссылки на декомпозирующие его 
диаграммы. 
      Дуги могут исходить из левого, верхнего, нижнего края диаграммы или из правого 
края блока. Дуги присоединяются к левому, верхнему, нижнему краю блока или правому 
краю диаграммы. Дуга может вести от блока к нему самому. Дуга представляет 
множество внешних по отношению к блоку объектов, участвующих в выполнении его 
функции. «Быть результатом» также означает участие в выполнении функции. Под 
объектами здесь понимаются и физические сущности (материалы, изделия, оборудование, 
персонал, документы и др.) и более абстрактные информационные (указания, 
потребности, сведения о наступлении событий и т.д.). Дуги могут сливаться и 
разветвляться, что соответствует объединению или разделению множеств объектов.
      
      
       		  
      
      Название соответствующих дуге объектов пишется вдоль нее преимущественно в 
форме подлежащего, возможно, с дополнениями и определениями («утвержденный 
баланс», «бракованное изделие», «нормы законодательства РФ», «оператор», «таблица 
активных процессов» и т.д.). По роли в выполнении функции блока дуги подразделяются 
на входные ( присоединяются к левой стороне блока), выходные (исходят из правой 
стороны блока), управляющие (присоединяются к верхней стороне блока) и дуги 
механизмов (к нижней стороне блока). Входные дуги соответствуют объектам, исполь-
зуемыми и преобразуемыми функцией блока. Выходные дуги изображают объекты, в 
которые преобразуются входы. Управляющие дуги обычно содержат условия выполнения 
функций и ограничения, учитываемые при их работе. Дуги механизмов раскрывают 
средства, которыми производится выполнение функций.
      
       
      
      
       
      
      Дуги, соединенные с краем диаграммы или присоединенные к блоку только одним 
концом являются внешними по отношению к данной диаграмме и выражают ее связь с 
внешним миром или другими подсистемами декомпозируемой системы. Остальные дуги 
являются внутренними по отношению к данной диаграмме. Если некоторый блок 
подвергается декомпозиции, то все инцидентные ему дуги будут внешними на 
декомпозируемой диаграмме. Это важное правило SADT, следование которому 
обеспечивает преемственность и непротиворечивость родительских и дочерних 
диаграмм.
      
      Рисунок.
       
      
      
      При декомпозиции блока 2 диаграммы A1 дуги A,B,C,D,E станут внешними для 
детализирующей диаграммы A12, например, следующим образом:
      
       
      
      
      Для идентификации внешних дуг в SADT принята система ICOM – обозначений. 
ICOM – сокращение от Input (вход), Control (управление), Output (выход), Mechanism 
(механизм). ICOM-нумерация внешних дуг выполняется следующим образом: входы 
кодируются литерой I и номером соответствующей дуги для родительского блока на 
декомпозируемой диаграмме. Аналогично для дуг управления (C), выходов(O) и 
механизмов(M). Нумерация дуг ведется сверху вниз для входов и выходов и слева 
направо для управляющих дуг и механизмов. 
      
      
       
      
      Заметим, что на диаграммах низкого уровня абстракции (и, соответственно, 
высокой степени детализации) может возникнуть потребность в использование большого 
числа внешних дуг, механическое перенесение которых на другие диаграммы 
нежелательно. В этом случае используются так называемые туннельные дуги (со 
скобочками), реализующие исключение из сформулированного выше правила 
декомпозиции диаграмм. Аналогично, некоторые дуги на родительских диаграммах 
иногда нежелательно переносить на дочерние, например, в тех случаях, когда дуга с 
родительской диаграммы связана со всеми блоками декомпозирующей диаграммы, но 
изображение всех этих связей нежелательно по соображениям наглядности. Туннельные 
дуги являются локальными по отношению к диаграмме и по выражению [3] позволяют 
“спрятать” некоторые подробности и показать необходимые детали.
      Пример:
      
           
      
      Дуга А не будет видна на родительской диаграмме; дуга B не будет видна на 
диаграмме, декомпозирующей блок 2; дуга C не будет видна ни на родительской, ни на 
декомпозирующей блок 3 диаграмме.
      
      Дуги SADT позволяют отображать на диаграммах не только последовательное и 
параллельное выполнение функций, но и обратную связь между блоками системы. В 
SADT различается два вида обратной связи – по потоку данных (выход – вход) и по 
управлению (выход – управление). Обратная связь по управлению свидетельствует о 
взаимном влиянии функций, тогда как обратная связь по потоку данных указывают на 
повторное использование и итерацию [3]. 
       	 	
      
      Последовательное и параллельное выполнение функций.
      
       
      
      Примеры обратной связи. 	А- обратная связь по управлению, B – по данным.
      
      Для большей наглядности сложных диаграмм рекомендуется продумать и 
использовать систему выделения цветом и толщиной линии дуг и блоков. Особенно это 
важно для сложных диаграмм с большим количеством пересекающихся дуг.
      
      
      Атрибуты диаграммы
      
      В верхней части бланка диаграммы размещаются следующие атрибуты (cм. рис):
      *	Автор
      *	Название проекта
      *	Дата создания
      *	Информация о рецензировании
      *	Статус диаграммы (рабочая версия/эскиз/рекомендовано/публикация)
      
      В поле «контекст» схематически изображается положение декомпозируемого 
блока на родительской диаграмме, для корневой диаграммы там пишется слово TOP 
(верхний). В нижней части диаграммы указывается ее название, совпадающее с 
названием декомпозируемого блока, а также индекс диаграммы в дереве модели 
(обозначение узла) и номер диаграммы в модели (С-номер). С-номер формируется из 
первых трех букв имени автора и последовательного номера, соответствующего 
хронологическому порядку создания диаграмм. Если в папке модели появляется новая 
версия диаграммы то рядом с ее С-номером указывается С-номер предыдущей версии. 
Обозначение узла для контекстной (корневой) диаграммы формируется из полного или 
сокращенного названия проекта, символа «/», буквы А (сокращение от Activity – 
деятельность), символ «-» и 0 – индекс корневой диаграммы. Обозначение узла 
диаграммы, декомпозирующую контекстную такое же, только без знака «-». Все другие 
номера узлов образуются посредством добавления к номеру узла родительской 
диаграммы номера декомпозируемого блока. Ведущий ноль в обозначении узла обычно 
не пишется, поэтому вместо ххх/А01 пишется ххх/А1.
      
      
      Создание SADT- модели
      
      Создание функциональной модели системы представляет собой с одной стороны 
алгоритмизированную процедуру, а с другой стороны оставляет простор для творчества 
автора. Методология SADT содержит рекомендации, обобщающие опыт декомпозиции 
реальных систем, следование которым позволяет повысить эффективность и качество 
моделирования. В создании SADT-модели выделяется следующая последовательность 
этапов:
      *	Начало моделирования – на этом этапе производится сбор информации о 
моделируемой системе, выбор цели модели и точки зрения, разграничение системы и 
внешней среды, оформленные в виде диаграммы A0 и контекстной диаграммы А-0.
      *	Выбор блоков, нуждающихся в декомпозиции и построение 
детализирующих их диаграмм.
      *	Критический анализ построенной модели и, возможно, возврат к 
предыдущим этапам.
      
      На этапе предварительного описания предметной области при разработке ПС цель 
функционального моделирования заключается в выявлении функций системы, рабочих 
мест, на которых они реализуются, управляющих воздействий и потоков данных. Точка 
зрения определяется техническими требованиями к ПС. Естественно, для реальных 
проектов цель моделирования формулируется более конкретно, например, может быть 
сделан акцент на уточнении некоторых неясных аспектов системы. 
      SADT содержит ценные указания по сбору информации (извлечению знаний) о 
системе. Они описаны в [3] и частично приводятся здесь в виде таблицы.
      
      
      
      
Стратегии 
сбора 
информации 

Преимущества
Недостатки
Рекомендации по 
применению
Опрос 
экспертов 
(специалистов в 
данной 
предметной 
области).
Эксперты, как 
правило, наилучшие 
источники 
информации о 
системе. Им известны 
текущие нюансы и 
недокументированные 
аспекты системы.
Эксперты обычно не 
готовы формально или 
хотя бы систематически 
изложить свои знания в 
нужных пределах.
Необходимо 
тщательно 
планировать выбор 
собеседника и круг 
обсуждаемых 
вопросов.
Чтение 
документов.

Доступность 
документов, их 
статичность.
Могут неточно отражать 
реальную ситуацию 
(утрата актуальности с 
течением времени, 
наличие 
недокументированных 
нюансов системы).
Использовать для 
получения 
первоначального 
представления о 
системе и в ходе 
подготовки к опросу 
экспертов.
Вести библиотеку 
документов.
Наблюдение за 
выполнением 
операций

Реальная информация 
“из первых рук”.
Не всегда возможно.
При длительном 
наблюдении развивается 
привыкание к положению 
дел в системе, 
утрачивается 
объективность восприятия 
и стремление к поиску 
альтернативных решений.
При возможности, не 
только наблюдать но 
и участвовать.
Анкетирование
Позволяет опросить 
большие группы 
экспертов в сжатые 
сроки.
Практика показывает, что 
результаты анкетирований 
часто субъективны и 
недостаточно достоверны.
Использовать после 
достаточного 
знакомства с 
системой, что 
позволяет тщательно 
подготовить вопросы 
и избежать 
непонимания и 
раздражения 
респондентов.
Рекомендуется 
использовать для 
выявления наиболее 
существенных 
проблем в системе.

Использование 
собственных 
знаний
Позволяет увидеть и 
использовать общие 
закономерности 
различных систем.
Применение ограничено. 
Для выявления специфики 
системы необходимы 
другие стратегии.
Необходим 
значительный личный 
опыт анализа систем.
Составление 
описания 
системы и 
обсуждение его 
с экспертами
Стимулирует поиск 
альтернативных 
решений.
Эксперты могут не быть 
готовы к восприятию 
новых возможностей.
Следует 
предварительно 
изучить предметную 
область и 
сформировать 
доброжелательно 
настроенную группу 
экспертов
      
      Важной частью этапа начала моделирования является построение диаграммы A0, 
на которой изображаются основные функциональные блоки системы и связывающие их 
объекты. Для выявления основных объектов и функций при построением диаграммы A0 
рекомендуется составить подробные перечни объектов и функций системы. Эти перечни 
вначале представляют собой просто список терминов, выявленных при сборе 
информации о системе. Не страшно, если список терминов будет избыточным, поскольку 
лучше его впоследствии сократить, чем изначально пропустить нечто существенное. 
Затем из списка терминов выбираются объекты, их перечень подвергается критическому 
анализу, на предмет исключения ненужных и объединения родственных объектов. Здесь 
также необходимо разграничить внутренние объекты системы, внешние, и 
интерфейсные, т.е. связывающие систему с внешним миром. Далее следует сделать 
предположения о роли выделенных объектов в системе (преобразуемые данные, 
управление, механизм) и перейти к работе со списком функций. Здесь требуется 
«увязать» функции с данными и сгруппировать функции в 3-6 блоков (подсистем) по 
признаку общности данных и назначения. Расположив эти блоки с учетом 
доминирования и соединив дугами, получим диаграмму A0. Контекстная диаграмма А-0 
легко получается обобщением диаграммы А0. Заметим, что процесс построения диаграмм 
часто бывает итерационным и, возможно, потребуется их неоднократная корректировка.
      Следующим большим этапом является декомпозиция блоков. Критерием 
окончания процесса декомпозиции является достижение поставленной цели 
моделирования. Начинать декомпозицию рекомендуется с самого насыщенного 
функциями блока. Процесс декомпозиции блока сходен с процессом создания диаграммы 
A0. Разница заключается в том, что для детализируемого блока уже известны его внешние 
интерфейсы и мы обладаем более подробными знаниями о системе в целом. 
Необходимые пояснения к вновь создаваемым диаграммам должны сразу же включаться в 
папку модели системы.
      Критический анализ модели должен дать ответ на вопрос – соответствует ли 
модель формальным требованиям SADT и в какой степени достигнута цель 
моделирования? Для ответа на этот вопрос следует сначала уточнить цель и точку зрения 
моделирования, изучить контекстную диаграмму и структуру модели в целом. 
Критический анализ отдельных диаграмм состоит в их синтаксическом и семантическом 
контроле. Распространенными синтаксическими ошибками являются:
      *	Неверная нумерация блоков или диаграмм, отсутствие названия у дуги
      *	Наличие блоков, не имеющих выхода или входа.
      *	Несовпадение дуг блока и внешних дуг его декомпозиции
      
      Семантический контроль заключается в нахождении ответа, в частности, на 
следующие вопросы с учетом цели и точки зрения моделирования [3]:
      
      *	Не перекрываются ли функции различных блоков?
      *	Нет ли избыточной детализации блоков?
      *	Нет ли недостаточно детализированных блоков?
      *	Всегда ли названия блоков и дуг понятны и однозначны?
      *	Всегда ли одинаковые термины используются в одном и том же смысле?
      *	Нет ли на одной диаграмме блоков или дуг явно относящихся к далеким 
друг от друга уровням иерархии абстракций?
      *	Нет ли ненужных дуг, касающихся блока?
      *	Не является ли диаграмма слишком запутанной?
      *	Всегда ли обоснованно используются туннельные дуги?
      *	Не следует ли некоторые дуги поместить в туннель?
      
      Крайне желательно выполнение критического анализа не только автором, но и 
коллегами, а также экспертами SADT и предметной области в форме совместного 
обсуждения или рецензирования. Еще раз подчеркнем, что построение функциональной 
декомпозиции представляет собой итерационный процесс с постоянным 
совершенствованием модели.
      В приложении С приведен пример функциональной SADT-модели, построенной 
для решения учебной задачи – выполнения начального этапа проектирования CASE-
системы.
      
      
      Всегда ли следует использовать SADT для функционального моделирования?
      
      	SADT не является единственной методологией функционального 
моделирования. Часто используется, например, методология DFD (Data Flow Diagrams - 
диаграммы потоков данных). DFD помимо примитивов для представления процессов 
(функций) и потоков данных содержат средства изображения хранилищ данных и 
внешних сущностей. Хранилище данных позволяет явно указывать данные, которые 
сохраняются процессом и впоследствии могут быть востребованы им или другими 
процессами. Использование хранилищ данных в DFD полезно в тех случаях, когда им 
впоследствии будут соответствовать реальные хранилища данных (например, таблицы 
базы данных)[5]. В противном случае их использование не очень эффективно, так как на 
начальном этапе анализа системы они представляют собой излишнюю подробность, а при 
последующей объектной декомпозиции системы ответственность за хранение своих 
данных лучше возложить на сами объекты. 
      В отличие от SADT, DFD не требуют явной типизации потоков данных (вход, 
управление, механизм). На наш взгляд это скорее недостаток DFD, чем преимущество, 
поскольку типизация позволяет более четко структурировать модель системы. В то же 
время, решение вопроса о том, к какому типу отнести данные программной системы – к 
управлению или входу, может представлять затруднение. Заметим также, что 
необходимость соединять дуги определенных типов с определенными сторонами блока 
SADT обеспечивает наглядность диаграммы, но в некоторых случаях требует от 
разработчика диаграммы определенных усилий, чтобы избежать значительного 
количества пересечений дуг.
      Очевидно, что ни SADT, ни DFD, ни какая либо другая методология не является 
«серебряной пулей» [8], применение которой само по себе гарантирует успех, однако 
отсутствие продуманной формализованной методологии анализа предметной области 
может стать одной из причин неудачи проекта. Выбор методологии функционального 
моделирования определяется обычно следующими объективными и субъективными 
факторами:
      *	объемом и характером проекта
      *	сроками проектирования и денежными ресурсами
      *	опытом применения разработчиками той или методологией
      *	наличием у разработчиков соответствующего программного обеспечения 
(CASE-систем)
      *	требованиями заказчика
      *	личными предпочтениями руководства и т.д.
      
      По рекомендации Э. Йордана [9], при недостаточных временных и финансовых 
ресурсах (а такая ситуация складывается сравнительно часто для малых проектов, 
выполняемых небольшой группой), единственным возможным вариантом является 
использование той методологии, которая наиболее знакома разработчикам, при этом в 
целях ускорения работы допускаются согласованные отклонения от стандартов, что 
представляет собой компромисс между степенью формализации и скоростью 
проектирования. Для крупных проектов выбор методологии и реализующих ее CASE-
средств является стратегическим вопросом, решаемым на отдельном этапе выбора и 
утверждения стандартов разработки.
      


      
      
     Основы UML
      
      
      UML (Unified Modeling Language) является языком моделирования сложных систем 
самых различных видов. В этом пособии мы будем рассматривать UML в 
непосредственной связи с объектно-ориентированной методологией проектирования 
программных систем. 
      В основном, UML используется в процессе анализа предметной области и 
проектирования ПС. UML позволяет моделировать различные аспекты системы как по 
отдельности, так и в их взаимосвязи. UML содержит средства для структурированного 
хранения информации о системе, что представляет огромную ценность при разработке 
сложных систем большими группами программистов. 
      Структурно, UML представляет из себя набор связанных между собой графических 
языков моделирования различных аспектов системы. При моделировании широко 
применяется объектный подход, в котором модель системы представляет из себя 
структурированное множество взаимодействующих объектов.
      	Моделирование обычно начинается с изучения базовых процессов в 
системе, для этого применяются диаграммы Вариантов Использования. Они служат той 
же цели, что и диаграммы SADT. Сравним эти два подхода:
      
      
      SADT
      «Варианты 
Использования»
Топология модели
Дерево диаграмм с 
детализацией процессов.
Детализация процессов 
производится в рамках 
одной диаграммы с 
использованием отношений 
включения и расширения.
Типизация потоков
Чёткое разделение на вход, 
выход, управление и 
механизм.
Отсутствует.
Использование модели при 
разработке ПС
Моделирование предметной 
области.
Явное выделение 
автоматизируемых 
процессов и внешних по 
отношению к ПС 
сущностей.
      
      На следующем этапе составляется объектная модель системы в первом 
приближении с помощью диаграмм Классов и Пакетов. К этой модели не следует 
относится как к окончательной, она будет много раз меняться в процессе дальнейшего 
моделирования. Далее рассматривается динамический аспект системы, для этого 
существуют диаграммы Взаимодействия, Деятельности и Состояний. Диаграмма 
Размещения позволяет смоделировать физическое расположение компонентов системы 
на вычислительных устройствах и их логическую взаимосвязь. 
      Отметим, что UML это только язык, на котором разработчик или аналитик 
излагает свои знания о системе, и сам по себе не является гарантом успешного 
моделирования (так же как и SADT). Однако, использование специализированного языка 
во многом облегчает этот процесс, помогая свести ошибки моделирования к минимуму.
      
      
      Диаграммы вариантов использования
      
      Как уже отмечалось, для анализа работы системы, выявления основных процессов 
и связей между ними применяются Диаграммы Вариантов Использования. Эти 
диаграммы удобно использовать при общении с заказчиком или экспертом. Выявленные 
процессы служат основой для построения остальных диаграмм UML. Зная, какие 
процессы происходят в нашей системе, мы сможем определить, какие объекты участвуют 
в этих процессах, в каких состояниях пребывает система, из каких частей состоит и т.д.
      В качестве основных строительных блоков в диаграмме используются 
«действующие лица» и «варианты использования». Под действующим лицом обычно 
понимается активная сторона, участвующая в процессе, например, пользователь. 
Варианты использования отражают тот или иной процесс в системе. Существует два вида 
зависимости между вариантами использования:
      1.	Включение. Один вариант использования может представлять собой 
композицию других вариантов использования, что отражает разбиение моделируемого 
процесса на подпроцессы. В таком случае блок варианта использования 
соответствующий детализируемому процессу соединяется с блоками вариантов 
использования подпроцессов связью «Включение».
      2.	Расширение. Один процесс может являться либо усложнённой версией 
другого процесса, либо просто содержать некоторые изменения или дополнения к этому 
процессу. Тогда говорят, что один процесс расширяет другой и соединяют их 
специальной связью «Расширение».
      
      Эти связи очень похожи и не всегда сразу ясно, какую из них применить. Поэтому 
используют следующие правила:
      -	Если процесс содержит изменение в нормальной работе другого, то применяют 
связь «расширение».
      -	Если же вы просто хотите избежать повторов в диаграмме, то лучше применить 
связь «включение». 
      Обычно приходится построить несколько диаграмм вариантов использования, 
прежде чем будет ясна структура процессов в системе и понятна модель автоматизации. 
Как и в SADT при построении диаграмм выбирается некоторая точка зрения на систему. 
С точки зрения пользователя, мы строим диаграмму процессов реальной системы в 
терминах предметной области. А с точки зрения разработчика, строим диаграмму 
процессов системы автоматизации в терминах взаимодействия модулей и компонент 
системы.
      
      Действующее лицо
       
      «Действующее лицо» представляет из себя некоторую внешнюю сущность по 
отношению к моделируемой системе. Эта сущность обязана некоторым образом 
взаимодействовать с системой. При этом каждому действующему лицу предписывается 
некоторая роль в данном взаимодействии. Таким образом, одна физическая сущность 
может быть представлена на диаграмме несколькими действующими лицами 
соответственно их ролям во взаимодействии с системой. Действующим лицом может 
являться как пользователь, так и некоторая внешняя система. На диаграмме оно 
изображается в виде «человечка», под которым подписывается его роль.
      
      Вариант использования
       
      Вариант использования изображает некоторый целостный процесс в системе, 
реализующий тот или иной сервис, предоставляемый системой пользователю. На 
диаграмме вариант использования изображается эллипсом. Внутри эллипса записывается 
название варианта использование или краткое описание в глагольной форме. Варианты 
использования соединяются с действующими лицами при помощи сплошных линий. 
Если действующее лицо соединено с вариантом использования, это означает, что оно 
имеет доступ к предоставляемому этим вариантом сервису.
      
      
      Коммуникация 
      
      Этот тип связи соединяет действующее лицо с Вариантом использования в том 
случае, если действующее лицо пользуется сервисом, предоставляемым данным 
вариантом. На диаграмме изображается сплошной линией.
      
      
      
      
      
      
      
      
      
      
      
      
      Связь Включение
       Чтобы изобразить, что Вариант использования №1 включает в себя Вариант 
использования №2, на диаграмме их соединяют пунктирной стрелкой, идущей от №1 к 
№2, с ключевым словом <<include>>. Это означает что сервис предоставляемый 
вариантом использования №2 используется внутри сервиса варианта использования №1.
      
      
      
      Связь Расширение
       
      Чтобы изобразить, что Вариант использования №1 расширяет Вариант 
использования №2, на диаграмме их соединяют пунктирной стрелкой, идущей от №1 к 
№2, с ключевым словом «extend». Это означает что сервис, предоставляемый вариантом 
использования №1 является видоизменённым сервисом варианта использования №2, т.е. 
содержащим некоторые дополнения или изменения.
      
      Границы системы
      Иногда на диаграмме обозначают границы моделируемой системы. Они 
изображаются в виде прямоугольника, внутри которого помещаются варианты 
использования. Очевидно, что действующие лица всегда будут находится за пределами 
этого прямоугольника.
      
      
      Диаграммы классов.
      
      Прежде чем перейти к изучению диаграмм классов, рассмотрим несколько 
понятий, необходимых для понимания сущности диаграмм.
      
      Базовым понятием в объектно-ориентированном программировании является, 
разумеется, понятие Объекта. 
      Объектом будем называть некоторую абстракцию, обладающую:
      -	множеством состояний;
      -	определённым поведением;
      -	механизмом однозначной идентификации.
      Классом будем называть множество объектов с одинаковой структурой и 
поведением. 
      Диаграммы классов предназначены для моделирования структуры классов, а 
также связей между ними. 
      Моделируя структуру класса, мы определяем набор его атрибутов и реакции на 
внешние события. Методы класса реализуют поведение, а конкретное значение набора 
атрибутов определяет Состояние объекта класса. При моделировании структуры классов 
базовым механизмом является Инкапсуляция - процесс скрытия всех деталей, не 
связанных с существенными характеристиками объекта. Инкапсуляция позволяет 
оперировать объектом, не вдаваясь в подробности его реализации. Скрытие подробностей 
достигается за счёт использования «областей видимости» атрибутов и методов класса. 
      Одним из главных типов связей между классами является наследование. Один из 
связанных наследованием классов называется «родителем», а другой – «наследником». 
При этом класс наследник, получает от родителя его атрибуты и методы, дополняя и 
переопределяя их. На этом основана реализация важнейшего для ООП принципа - 
Полиморфизма.
      Полиморфизмом называется способность объекта одного класса реагировать на 
внешние воздействия, как объект другого класса. В классических объектно-
ориентированных системах программирования полиморфизм реализуется с помощью 
наследования на основании того факта, что объект класса-наследника может 
использоваться в качестве объекта класса-родителя. Другими словами, объект класса-
родителя может принимать формы своих наследников. Это достигается за счёт 
переопределения методов родителя в наследниках. Таким образом, иногда удобно 
использовать в качестве родителя класс, обладающий методами без конкретной 
реализации. Естественно, что объектов такого класса существовать не может, однако, 
если его наследник реализует недостающие методы, то мы можем создать его экземпляр и 
работать с ним, как описано выше. Тем самым мы разделяем интерфейс объекта и его 
реализацию за счёт использования наследования. Классы, в которых описан только 
перечень методов без реализации называются Интерфейсами.
      
      Создание диаграмм
      
      Графический язык диаграмм классов состоит из прямоугольных блоков 
представляющих классы, ломаных, изображающих связи между ними, а так же надписей-
модификаторов, раскрывающих внутреннюю структуру классов и связей.
      Первой задачей, решаемой при построении диаграмм классов является выделение 
перечня классов, присутствующих в моделируемой системе. Для решения этой задачи 
можно использовать функциональную модель системы в виде диаграмм Вариантов 
Использования или SADT. На первом этапе в качестве кандидатов для названий классов 
берутся имеющие отношение к рассматриваемой системе имена существительные, 
появляющиеся в диаграммах функциональной модели. Далее выкидывают синонимы и 
несущественные классы. Часть существительных может представлять собой не классы, а 
их атрибуты. Если возникает сложность с определением – является ли существительное 
классом или атрибутом, то обычно поступают следующим образом: если значение данной 
сущности важнее чем факт её существования, то это атрибут, если наоборот – класс. 
Далее на основании связей между сущностями функциональной модели выясняются 
зависимости между классами и выделяются основные методы классов. Если несколько 
классов обладают набором одинаковых методов, то в большинстве случаев целесообразно 
вынести эти методы в отдельный класс или интерфейс, а исходные классы унаследовать 
от него. Во время дальнейшего моделирования, в частности, при рассмотрении 
динамических аспектов системы, может изменяться как множество классов так и их 
структура.
      В зависимости от точки зрения различают несколько уровней диаграмм классов:
      *	Концептуальный уровень. Для лучшего понимания устройства системы 
иногда бывает полезно смоделировать предметную область, в целом, не думая о процессе 
автоматизации. Полученные диаграммы отражают общую концепцию моделируемой 
системы.
      *	Уровень спецификации. Диаграмма данного уровня строятся с точки 
зрения разработчика системы и отражают базовые классы и интерфейсы, используемые в 
процессе автоматизации.
      *	Уровень реализации. Отличается от предыдущего тем, что моделированию 
подлежит не просто структура интерфейсов и связей между ними, но и конкретные 
детали реализации. Две последние точки зрения намеренно разделяют для обеспечения 
независимости интерфейсной части от деталей реализации.
      
      
      Классы 
      
       Классы на диаграмме изображаются прямоугольниками, разделёнными 
горизонтальными линиями на три части. В верхней части пишется имя класса. Имя класса 
должно быть уникальным в пределах данной диаграммы. В центральной секции 
перечисляются атрибуты класса. В самом простом случае каждому атрибуту 
соответствует запись, в которой указывается область видимости и имя атрибута. Область 
видимости атрибута обозначается специальным символом (квантором видимости) перед 
его именем, и может принимать одно из следующих значений:
      
      
      +	означает, что атрибут доступен для всех классов.
      #	означает, что атрибут доступен только методам данного класса или его 
наследников.
      - 	означает, что данный атрибут доступен только методам данного класса.
      
      В последней секции прямоугольника перечисляются методы класса, каждому 
имени так же может предшествовать квантор видимости. После имени метода можно 
перечислить список его параметров. Они перечисляются в круглых скобках, через 
запятую.
      Поскольку в большинстве языков программирования не предусмотрен контроль 
доступа к атрибутам класса, необходимый для поддержания целостности информации, то 
операции чтения и записи значений атрибутов лучше реализовывать виде 
общедоступных методов класса, а сами атрибуты рекомендуется делать второго типа (#).
      Например, класс представляющий квадратный трёхчлен должен содержать в 
качестве атрибутов как его коэффициенты, так и дискриминант. Тогда при каждой 
модификации любого коэффициента необходимо пересчитывать дискриминант. Вызов 
операции пересчёта дискриминанта удобно встроить в методы модификации 
коэффициентов.
      Такой подход делает класс более удобным к последующей модификации в 
процессе разработки, а так же позволяет легко поддерживать целостность внутренних 
данных класса.
      
      
      Ассоциации 
      Ассоциации показывают множественные зависимости между объектами классов 
системы. На диаграмме они обозначаются линиями, соединяющими классы. На концах 
линий (например, у Класса1) могут подписываться символы множественности:
      
      0..1 	– любой объекта Класса2 связан с нулём или более объектов Класса1;
      1	- любой объект Класса2 связан ровно с одни объектом Класса1;
      1..*	- любой объект Класса2 связан с одни или более объектом Класса1;
      *	- любой объект Класса2 связан с нулём, одним или более объектом Класса1.
      
       	Так же можно подписать роли объектов в данной зависимости. Это делается 
под линией, рядом с классом. Например, для зависимости «Состоять в браке» между 
объектами класса «Человек» линия ассоциации будет присоединена обоими концами к 
классу «Человек», а роли объектов будут «Муж» и «Жена».
      Если данная зависимость существует только при выполнении некоторого условия, 
то его можно подписать рядом с линией зависимости поместив в фигурные скобки. 
Например, зависимость «Состоять в браке» будет существовать только при наличии 
регистрации брака.
      
      
      Агрегация
      
       Если один объект является составной частью другого, то такие объекты связывают 
на диаграмме зависимостью «агрегация». Она изображается в виде линии соединяющей 
объект-компонент с объектом-целым, при этом у объекта-целого ставится ромбик на 
окончании линии. Как и в случае с обычной ассоциацией, здесь могут применятся 
символы множественности, имена ролей и условия существования зависимости.
      
       
      Наследование
      
      Данный вид зависимости между классами выражает иерархию наследования. На 
рисунке она изображается линией идущей от класса наследника к классу родителю, с 
незакрашенным треугольником рядом с последним. Иногда удобно обозначить, по какому 
признаку производится наследование, особенно если один класс наследуется от 
нескольких. Для этого рядом с треугольником пишется роль класса в наследовании.
      	Например, класс “Сторожевая собака” является наследником класса 
“Собака” с ролью “Происхождение”, и одновременно – наследником класса “Сторож” с 
ролью “Охрана”.
      
      
      
      Зависимости.
      
       Данное отношение показывает, что если объект одного класса был изменён, то это 
может потребовать изменения в другом, зависимом объекте. На рисунке обозначается 
пунктирной стрелкой идущей от зависимого класса к независимому. Например, цены на 
продукцию предприятия зависят от цен на потребляемые ресурсы.
      
      
      
      Диаграммы взаимодействия и кооперации.
      
      Диаграммы взаимодействия и кооперации отражают взаимодействие различных 
объектов в системе. С помощью этих диаграмм удобно выявлять, на какие внешние 
события будут реагировать объекты и находить последовательности этих событий. Таким 
образом, мы можем определить не только динамический аспект работы ПС, но и 
структурные связи между взаимодействующими объектами.
      Объекты и действующие лица изображаются в виде вертикальных линий. Эти 
линии символизируют ось времени, направленную сверху вниз, на которой 
откладываются промежутки обработки событий. Наверху каждой линии изображается 
специальный символ, обозначающий объект или действующее лицо.
      
      Действующее лицо
       
      Действующее лицо изображается в виде человечка, под которым подписывается 
его название. 
      
      
       
      
      Объект
      
      Объект изображается в виде прямоугольника. Сверху в прямоугольнике пишется 
имя объекта (обычно жирным шрифтом с подчёркиванием), под именем объекта может 
располагаться имя его класса.
      
      
      События
      
       Жизненный цикл объекта состоит из создания, уничтожения и реакции на 
события. События изображаются в виде горизонтальной стрелки идущей от инициатора 
события (Объект1) к его получателю (Объект2). Время обработки события изображается 
на линии жизни объекта в виде утолщения, начинающегося от точки соприкосновения со 
стрелкой.
      В случае вложенных вызовов, то есть, если объект инициирует событие во время 
обработки другого события, то время обработки исходного события увеличивается на 
время обработки порождённого.
      Свойства события указываются над его стрелкой. В случае, если происходит 
несколько последовательных вызовов, то ставится значок * и в квадратных скобках 
указывается число итераций. Если существует условие порождения события, то оно 
указывается в квадратных скобках, без каких-либо дополнительных значков. Можно так 
же указать имя обработчика события в объекте-получателе. Оно указывается после 
символа /. Далее в круглых скобках может идти перечисление параметров, и через 
двоеточие тип возвращаемого значения.
      Линии синхронных событий заканчиваются сплошной стрелкой, а линии 
асинхронных имеют на конце только верхнюю половинку стрелки.
      В случае, если объект посылает событие самому себе, то к временной линии 
обработки изначального события добавляется сбоку ещё одна толстая линия обработки 
нового события.
      
      
      Диаграммы кооперации
      
      Как говорилось выше, диаграммы кооперации являются, в некотором смысле, 
аналогом диаграмм взаимодействия. Главным отличием диаграмм кооперации является 
акцентирование внимания на структурном аспекте взаимодействия, а не на 
последовательности действий, как в диаграммах взаимодействия. 
      Элементы диаграммы кооперации можно располагать в произвольном месте поля. 
При этом у них нет линий жизни, как это было в диаграммах взаимодействия.
       
      Действующее лицо
      
      Как и в диаграммах взаимодействия, действующее лицо изображается в виде 
человечка. 
      
      Объект
      
      Объект обозначается в виде прямоугольника, в котором указывается его имя и, 
через двоеточие, имя класса, которому он принадлежит.
      
      Сообщение 
      
       	Сообщения изображаются стрелками, идущими от создателя сообщения к 
его получателю. 
      Стрелки выходящие из объекта, первым пославшим сообщение, нумеруются 
цифрами 1,2,3 и т.д. Объект, уже получивший одно из сообщений, нумерует исходящие 
сообщения следующим образом: k.1,k.2,k.3 и т.д., где k-номер полученного сообщения.
      	Очень удобно использовать диаграммы «вариантов использования» или 
SADT в качестве отправной точки для построения данного вида диаграмм. Можно 
порекомендовать следующую последовательность действий:
      
      *	В качестве рассматриваемого процесса в системе берётся один из вариантов 
использования (процесс SADT).
      *	Выявляются участвующие во взаимодействии объекты и их классы. Для 
этого используются диаграммы классов.
      *	Взаимодействие начинается с «Действующего лица», и рассматривается 
последовательно от объекта к объекту. При этом недостающие методы добавляются в 
соответствующие диаграммы классов.
      *	При необходимости в диаграммы классов добавляются новые классы. Это 
вызвано тем, что невозможно сразу построить адекватную статическую модель системы 
без рассмотрения динамических аспектов.
      
      Диаграммы кооперации иллюстрируют структурную связь между объектами, а 
диаграммы взаимодействия отображают временной аспект взаимодействия. Эти 
диаграммы можно использовать как вместе, так и по отдельности.
      
      
      Диаграммы состояний
      
      Диаграммы состояний представляют из себя одну из разновидностей описания 
работы конечных автоматов. Моделируемая система рассматривается как единый объект с 
некоторым фиксированным множеством состояний, и набором условий, регулирующих 
переход из одного состояния в другое. Каждому состоянию приписывается определённое 
действие, которое выполняется при переходе системы в данное состояние. Считается, что 
объект может пребывать в некотором состоянии довольно продолжительное время, при 
этом переход из одного состояния в другое осуществляется мгновенно. 
      Визуально автомат можно представлять в виде ориентированного графа, в котором 
дуги соответствуют переходам между состояниями, а вершины -состояниям. Выделяют 
одно начальное состояние, и множество конечных состояний. В каждый момент времени 
автомат может находится только в одном состоянии, и переход из этого состояния может 
осуществится только в одно состояние, явно определённое условием перехода, т.е. не 
может существовать коллизий, позволяющих осуществить переход сразу в несколько 
состояний.
      С помощью диаграмм состояний можно выделять методы и атрибуты объектов 
системы, а также определять алгоритмы реализации методов. 
      Состояние системы определяется значениями атрибутов объектов и локальных 
переменных с одной стороны, и текущей исполняемой командой активного метода с 
другой стороны. Таким образом, посредством данных диаграммам мы можем полностью 
описать работу системы. Заметим, что данные диаграммы являются иерархическими 
(каждое состояние может быть детализировано отдельной диаграммой), что позволяет 
наглядно представлять даже системы с большим числом состояний и переходов.
      На практике чрезмерная детализация не всегда полезна, так как нижние уровни 
детализации привязаны к конкретному языку программирования, и содержат детали, 
несущественные с точки зрения поведения системы. Рекомендуется прекращать процесс 
детализации на таком уровне, чтобы все операции носили элементарный характер в 
понимании разработчиков системы. Например, «сложить два числа», «отсортировать 
массив», «доказать теорему» и т.д.
      Диаграммы состояний обычно строятся для некоторых конкретных объектов 
системы. Это позволяет лучше отследить их поведение в течении всего жизненного 
цикла и, следовательно, лучше спроектировать их структуру. 
      
      Состояния
      
       Начальное состояние изображается сплошным кругом, и является стартовой 
точкой для построения диаграммы переходов состояний.
      
       Конечное состояние изображается на диаграмме в виде чёрного круга внутри 
белого. Переход в конечное состояние соответствует завершению жизненного цикла 
системы.
      
       Промежуточные состояния системы изображаются в виде прямоугольников с 
закруглёнными краями. Прямоугольник может быть поделён на две части, тогда в 
верхней части указывается имя состояния, а в нижней - действие, ассоциируемое с 
состоянием. Если прямоугольник не поделен на части, то он содержит только имя 
состояния.
      
      Переходы
       
      Из каждого не конечного состояния существует один или более переход в другое 
состояние. Переходы изображаются в виде стрелок, соединяющих между собой состояния 
системы. Над стрелкой пишется имя события, инициирующего переход, в круглых 
скобках указываются аргументы события, в квадратных скобках указываются условия 
возникновения события, а после наклонной черты указывается действие ассоциируемое с 
переходом.
      
      
      Суперсостояния
      
      Часто можно выделить группу состояний, одинаково реагирующих на некоторое 
внешнее событие, то есть выполняющих переход в одно и то же состояние. В этом случае 
состояния объединяют в Суперсостояние. Оно изображается в виде прямоугольника с 
закруглёнными краями. Имя суперсостояния помещается в специальном прямоугольнике 
в верхней части прямоугольника состояния. Входящие и исходящие переходы 
Суперсостояния указываются так же, как и для обычных состояний. 
      
      
      Диаграммы деятельности
      
      Диаграммы деятельности предназначены для моделирования временного аспекта 
поведения системы. Как и в диаграммах кооперации, объектами моделирования являются 
процессы в системе. В зависимости от уровня абстракции, это могут быть либо 
обобщённые процессы, либо их конкретные реализации на уровне объектов. Ключевой 
особенностью этих диаграмм является наличие средств, позволяющих визуализировать 
взаимодействие нескольких параллельных потоков управления, а именно точек 
ветвления и синхронизации.
      При решении большого класса прикладных задач естественным образом 
возникают параллельные процессы. Например, можно с уверенностью сказать, что любая 
программа должна обладать, как минимум двумя потоками управления: один – для 
выполнения основных вычислительных функций, второй – для взаимодействия с 
пользователем, другими словами, для пользовательского интерфейса. При этом 
взаимодействие потоков может быть довольно таки нетривиальным. Большое количество 
подобных задач стало причиной появления средств поддержки многопоточности на 
уровне языков программирования. Использование диаграмм деятельности существенно 
упрощает процесс проектирования программ с взаимодействующими потоками. В основе 
данных диаграмм лежит известный механизм сетей Петри, уже давно применяемый при 
моделировании поведения технических, экономических и других систем.
      
      Деятельности
      
      Начальные и конечные состояния системы изображаются точно так же, как и в 
диаграммах состояний. Вместо блоков обычных состояний здесь используются блоки 
деятельности или, по-другому, активности. Активности изображаются в виде 
прямоугольника с закруглёнными краями. Внутри прямоугольника пишется имя 
активности в глагольной форме. Таким образом, в отличие от диаграмм состояний, мы 
делаем акцент не на состояниях в которых пребывает система, а на действиях 
осуществляемых в заданных состояниях.
      Активности соединяются между собой переходами. В каждой активности может 
начинаться несколько переходов, изображаемых стрелками. Над каждой стрелкой 
подписывается имя перехода и, в квадратных скобках, условие его возникновения.
      
      Ветвления
      
       
      
      При моделировании параллельных процессов в системе необходимы средства для 
указания того, что некоторые последовательности событий активизируются 
одновременно. Таким средством является Ветвление. Оно изображается горизонтальным 
или вертикальным отрезком, к которому ведет один переход, а выходит - несколько. 
      
      Синхронизация
      
      Другим важным аспектом разработки параллельных систем является 
синхронизация нескольких процессов. Говорят, что процессы синхронизируются, если 
они в определенный момент времени сливаются в один процесс. Например, при 
проведении параллельных вычислений необходимо собрать результаты работы 
отдельных процессов для получения конечного результата.
      Для этих целей используется блок Синхронизации. Внешне он ни чем не 
отличается от блока Ветвления, за исключением того, что к блоку синхронизации с одной 
стороны ведет несколько переходов, а с противоположной выходит только один (в 
ветвлении всё было наоборот). Если не накладывается дополнительных условий, то 
переход срабатывает, когда все процессы дошли до точки синхронизации.
      
      
       
      
      
      
      
      
      
      
      
      
      
      
      
      Возможна ситуация, когда точка ветвления одновременно является и точкой 
синхронизации.
      
      
      Диаграммы размещения
      
      Диаграммы размещения предназначены для описания структуры сетевых и 
распределённых приложений, а также размещения модулей программной системы. На 
них изображается распределение программных компонент по вычислительным ресурсам 
и связи между ними. Можно сказать, что данный вид диаграмм отображает связи между 
аппаратным и программным обеспечением системы. Основными элементами диаграмм 
размещения являются узлы, компоненты и интерфейсы.
      
      
      Узел
       Узел изображается на диаграмме в виде параллелепипеда и ассоциируется с 
некоторым вычислительным устройством. В верхней части пишется имя 
вычислительного устройства. Узлы могут быть соединены между собой линиями, 
изображающими коммуникационные каналы между вычислительными устройствами.
      
      
      
       Компонент
      
      Компонент ассоциируется с некоторой программой (выполняемым модулем, 
динамической библиотекой и т.д.). Компоненты размещаются внутри узлов, на которых 
они функционируют. На диаграмме может быть показана зависимость между 
компонентами. Она изображается в виде пунктирной стрелки, направленной от 
зависимого компонента.
      
      
      Интерфейс
      
       Интерфейс компонента изображается на диаграмме в виде круга. Имя интерфейса 
подписывается под кругом. Один компонент может реализовывать несколько 
интерфейсов. То, что компонент реализует некоторый интерфейс, указывается на 
диаграмме соединением компонента и интерфейса сплошной линией.
      
      
      
      
      
      Диаграммы пакетов
      
      Диаграммы пакетов применяются как средство, позволяющее объединять 
диаграммы классов в иерархические множества и проиллюстрировать зависимости между 
ними. Это означает, что мы может разбить нашу диаграмму классов на смысловые 
группы, установив между ними отношения зависимости. Например, мы можем отделить 
классы, отвечающие за пользовательский интерфейс, от классов, выполняющих основную 
вычислительную работу, разделив их на два разных пакета. При этом мы можем показать 
на диаграмме, что пользовательский интерфейс зависит от функциональности. Это, в 
частности, отражает тот факт, что классы, отвечающие за интерфейс должны так или 
иначе ссылаться на «функциональные» классы.
      
      
      Пакеты
       
      Пакет изображается на диаграмме в виде «папки», разделённой на три части. В 
верхней части папки указывается имя пакета. В средней части в столбик перечисляются 
имена подпакетов, входящих в состав данного пакета. В нижней части перечисляются 
имена классов, входящих в состав данного пакета (за исключением классов, входящих в 
состав подпакетов).
      
      
      
       
      Зависимости
      
      Зависимости между пакетами изображаются в виде пунктирной стрелки, 
направленной от зависимого пакета (как и на предыдущих диаграммах).
      


     Приложение A. Создание SADT-моделей с помощью программы 
BPWin 4.0
      
      Распространенным средством автоматизации функционального моделирования 
является программная система BPWin фирмы PLATINUM. BPWin поддерживает не 
только входящий в SADT стандарт IDEF0, но и другие методологии описания потоков 
данных – IDEF3 (ProcessFlow) и DFD (DataFlow). Мы будем рассматривать только работу 
с SADT диаграммами. Работа с BPWin подробно описана в [11].
      
      Для создания новой модели следует выбрать пункт меню File/New (значок  ) и 
указать имя модели в открывшемся диалоговом окне. После этого BPWin предлагает 
ввести имя автора и задать другие свойства модели. Мы рекомендуем сначала 
ограничиться указанием автора, а другие свойства определить позднее. 
      
 
      
      На рисунке изображено главное окно системы BPWin, на котором расположены:
      
      1.	заголовок окна с названиями модели и диаграммы.
      2.	панель меню
      3.	стандартная панель инструментов BPWin
      4.	панель инструментов для работы с диаграммами IDEF0 (SADT)
      5.	окно управления моделью (Model Explorer)
      6.	окно активной диаграммы
      7.	строка состояния


      
      
Основные инструменты BPWin
      
      Перечислим основные команды BPWin , используемые при разработке SADT-
моделей
      
Команда
Значок на панели 
инструментов
Создать модель
 
Открыть существующую модель
 
Сохранить модель
 
Распечатать модель
 
Выбрать элемент на диаграмме
 
Добавить блок
 
Добавить дугу
 
Добавить выноску
 
Добавить текст
 
Отобразить редактор модели
 
Перейти к диаграмме, ассоциированной с текущей
 
Перейти к родительской диаграмме
 
Перейти к декомпозирующей блок диаграмме, если она 
есть или создать ее шаблон, если она отсутствует
 

      
      
      При создании новой модели BPWin автоматически открывает в окне диаграмм 
шаблон контекстной диаграммы А-0. В соответствии с методологией SADT, построение 
модели следует начинать с создания диаграммы A0. Для этого необходимо 
декомпозировать контекстную диаграмму, используя инструмент  . В момент создания 
новой диаграммы BPWin запрашивает количество размещаемых на ней блоков. 
Впоследствии блоки можно будет добавить ( ) или удалить. Чтобы удалить блок или 
любой другой элемент диаграммы, его следует выбрать ( ) и нажать клавишу Del. Для 
соединения блоков дугами используется инструмент  . Подсоединение дуг к блокам и 
краям диаграммы, а также разветвление и слияние дуг легко производится щелчками 
мыши. 
      Имена и другие атрибуты дуг, блоков и диаграмм удобно задавать и 
модифицировать с помощью контекстного меню, вызываемого правой кнопкой мыши. 
Иногда случается, что надписи на диаграммах отображаются нерусифицированными 
шрифтами и их невозможно прочитать. Подбор и задание по умолчанию нужных 
шрифтов для различных текстовых элементов диаграмм осуществляется в пунктах меню 
Model/Default Fonts (Модель/Шрифты по умолчанию). Флажок Change all occurences 
of this font in model позволяет заменить изменить предыдущий шрифт на новый во всех 
надписях модели.
      
Свойства моделей, диаграмм и их элементов
      
      Перечислим основные свойства SADT моделей, определяемые в пункте меню 
Model Properties и поясним их назначение.
      Закладка General (Общие):
      *	Model name – название модели
      *	Project – название проекта, в рамках которого создается модель
      *	Author - автор
      *	Author initials – инициалы автора
      *	Time Frame – соответствие модели и системы: принимает значение AS-IS (как 
есть), если модель описывает текущее положение дел в системе, или TO-BE, если 
моделируется новая или модифицированная система.
      
      Закладка Purpose (Цель):
      *	Purpose – цель моделирования
      *	Viewpoint – точка зрения
      
      Закладка Status (Статус):
      Status – статус модели, характеризующий степень ее завершенности (DRAFT-
черновик, WORKING – рабочий вариант, RECOMMENDED – вариант, прошедший 
экспертизу, PUBLICATION – окончательный вариант)
      *	Creation date – дата начала моделирования
      *	User last revision date – дата последнего внесения изменений в диаграмму, 
указанная пользователем
      *	System last revision date – дата последнего внесения изменений в диаграмму, 
проставленная операционной системой
      
      Закладка Numbering (Нумерация) – устанавливает режимы нумерации блоков и 
диаграмм:
      *	Number prefix - начальная буквенная часть (префикс) имени блока. По 
умолчанию - А.
      *	Show prefix – нужно ли отображать префикс.
      
      Закладка Display (Отображение) – позволяет скрыть/отобразить следующие 
элементы:
      *	Activity Numbers – номера блоков
      *	Arrow Names – имена дуг
      *	ICOM codes – коды ICOM
      *	Colors – цветовое оформление
      *	ABC Data - Activity Based Costing Data - данные стоимостного анализа
      *	Tunnels - туннели дуг
      *	Shadows – тени у блоков
      *	Leaf Corners – метки в левом верхнем углу терминальных (недетализируемых) 
блоков
      *	Squiggles – выноски
      
      При включенном режиме отображения ABC – данных блока, поле ABC Units 
(единицы стоимостного анализа) задает интерпретацию их числовых значений:
      *	Cost – стоимость однократного выполнения функции (по умолчанию)
      *	Frequency – средняя частота выполнения функции
      *	Duration – средняя продолжительность выполнения функции
      
      В закладке Draw Style (Стиль изображения) определяется, будет ли применяться 
ко всем диаграммам модели единый стиль изображения, или диаграммы могут рисоваться 
в разных стилях.
      	В закладке Layout (Размещение) устанавливаются следующие режимы 
работы с блоками и дугами:
      *	Allow Box to be moved – разрешить перемещение блоков
      *	Allow Box to be resized – разрешить изменение размера блоков
      *	Break arrows at intersection – разрывать одну из дуг при их пересечении
      
      Следующие три взаимоисключающих режима определяют способ размещения 
текста, выходящего за границы блока 
      *	Do not resize or wrap – запретить автоматический перенос и масштабирование
      *	Wrap text to fit box - разрешить автоматический перенос по словам, чтобы 
уместить текст
      *	Automatically resize box to fit text - разрешить автоматическое масштабирование 
блока по размерам текста
      
      В закладке ABC Units (Единицы данных стоимостного анализа) можно задать 
формат написания денежных единиц и времени.
      Форму блока можно изменить в закладке Shapes (Формы). 
      Размер листа диаграмм и расположение на ней стандартных надписей задаются в 
закладках Page Setup (Параметры страницы) и Header/Footer (Верхний/нижний 
колонтитул).
      
      Выбрав пункт меню Diagram properties (Свойства диаграммы), можно 
установить  для текущей диаграммы статус, авторство, параметры страницы и значения 
других атрибутов. По умолчанию, значения большинства атрибутов диаграммы 
устанавливаются равными значениям соответствующих атрибутов модели. В закладке Kit 
(Комплект) при необходимости указываются С-номер диаграммы и номер страницы с 
диаграммой в папке. С помощью закладки Diagram Text (Текст диаграммы) можно 
сопоставить диаграмме комментарий.
      
      Вызываемое нажатием правой кнопкой мыши на объекте, контекстное меню 
позволяет задавать для блоков и дуг следующие основные параметры:
*	Name – имя
*	Note – комментарий
*	Cost – стоимость
*	Style – стиль изображения


Особенности работы с дугами

      BPWin проверяет соответствие входов и выходов декомпозируемого блока и 
внешних дуг декомпозирующей диаграммы, автоматически помечая “лишние” дуги 
квадратными скобками. Пункт контекстного меню дуги Arrow Tunnel (Туннельная 
дуга) позволяет либо добавить такую  дугу к декомпозируемой диаграмме (Resolve it to 
border arrow), либо поместить в туннель, обозначенный круглыми скобками (Change it to 
resolved rounded tunnel).  Все дуги, автоматически добавляемые к декомпозируемой 
диаграмме, необходимо вручную соединить с соответствующими блоками этой 
диаграммы.
      
      
Словари дуг и блоков
      
      Полезным средством организации работы с моделью являются автоматически 
формируемые словарь имен дуг (Arrow Dictionary) и словарь имен блоков (Activity 
Dictionary). Их можно рассматривать как словари терминов предметной области. BPWin 
позволяет снабдить каждый термин формальным определением и пояснением. 
Соответствующие функции сосредоточены в пунктах меню Dictionary(Словарь). 
Содержимое словарей может быть экспортировано/импортировано в виде 
форматированных текстовых файлов (пункты Export и Import меню File).


Управление моделью с помощью Model Explorer
	
	В закладке Activities (Функции) окна управлению моделью (Моdel Explorer, ME) 
изображается дерево функциональных блоков модели. Это дерево наглядно представляет 
структуру модели и обеспечивает удобный способ навигации (переключения между 
диаграммами и блоками). Управление деревом модели напоминает работу с обычным 
деревом папок Windows. Щелчком правой кнопки мыши на соответствующей вершине 
дерева вызывается контекстное меню, содержащее основные функции работы с данным 
блоком.
	В закладке Diagrams(Диаграммы) отображается дерево IDEF0-диаграмм SADT-
модели, а также перечисляются диаграммы дерева узлов (node tree diagrams) и 
экспозиционные (for exposition only, FEO) диаграммы. Диаграмма дерева узлов 
отображает иерархию IDEF0-диаграмм и функциональных блоков модели. Сокращенный 
вариант диаграммы дерева узлов (без функциональных блоков) приведен на рисунке в 
приложении C. Экспозиционные диаграммы используются для дополнительного 
иллюстрирования SADT-моделей. Экспозиционные диаграммы создаются на основе 
IDEF0-диаграмм, но в них могут содержаться отступления от синтаксиса IDEF0, 
вызванные соображениями наглядного представления того или иного аспекта модели.	
	 

Вывод модели на печать

      Диалог печати модели вызывается командой Print меню File. Помимо 
предоставления стандартных возможностей диалога печати, он позволяет выборочно 
распечатывать диаграммы из дерева модели в задаваемом пользователем масштабе, а 
также печатать отчет о диаграмме, состоящий из значений указанных пользователем 
атрибутов.


 Приложение B. Использование Together Control Center для построения 
UML-моделей.
      
      Together CC представляет из себя CASE средство, обладающее встроенным 
диаграммером, средствами автоматического создания документации, средствами 
кодогенерации для различных языков программирования, а так же механизмом генерации 
диаграмм по исходному коду проекта. Встроенный диаграммер поддерживает все типы 
диаграмм языка UML с небольшими изменениями и дополнениями.
      	На рисунке изображено основное окно Together CC.
       
      Основные элементы помечены цифрами в чёрных кружках. Рассмотрим их 
назначение:
      1.	Главное меню Together CC. 
      Здесь содержатся все основные функции системы по управлению проектом. 
Например: создание нового проекта, открытие ранее сохранённого, генерирование 
документации и т.д. С помощью меню также можно менять внешний вид Together CC, 
убирая с рабочего поля ненужные элементы.
      2.	Главная панель инструментов Together CC.
      На главной панели расположены кнопки, дублирующие функции главного меню. 
Её основное назначение быстрый доступ к часто используемым функциям. 
      3.	Закладки с браузером проекта.
      В данном наборе закладок содержаться различные средства навигации по 
элементам проекта. Например, дерево элементов проекта, содержащее полный список 
диаграмм проекта и их элементов.
      4.	Закладки с рабочими полями различных диаграмм.
      С помощью этого набора закладок удобно переключаться между различными 
диаграммами проекта. Имя закладки соответствует имени диаграммы, а значок рядом с 
именем – её типу.
      5.	Панель инструментов редактора диаграмм.
      На этой панели размещены инструменты редактирования диаграммы, выбранной с 
помощью закладок (4). Для различных типов диаграмм наборы инструментов различные. 
Общим для всех диаграмм является верхний инструмент «Указатель». Он используется 
для перемещения различных элементов диаграммы по её полю, а так же для выбора 
текущего элемента.
      6.	Редактор свойств элементов диаграмм.
      С помощью редактора свойств можно устанавливать атрибуты различных 
элементов диаграммы. В редакторе отображаются атрибуты элемента, выбранного с 
помощью инструмента «Указатель». Если ни один из элементов диаграммы не выбран, то 
отображаются атрибуты самой диаграммы.
      7.	Редактор кода.
      Редактор кода позволяет модифицировать исходный код проекта. В редакторе 
показывается исходный код текущего класса на заранее выбранном языке 
программирования. Например, на Диаграмме Классов мы можем выбрать некоторый 
класс и редактировать его свойства как с помощью диаграммера (8) так и с помощью 
редактора кода.
      8.	Рабочее поле диаграммы.
      В данном поле размещаются элементы рабочей диаграммы. Для 
создания/модифицирования диаграммы необходимо выбрать в панели (5) 
соответствующий инструмент, после чего применить его к диаграмме.
      
      
      Создание проекта
      
      Работа с Together CC начинается с создания нового проекта. Для того что бы 
создать новый проект необходимо в меню (1) выбрать пункт File и подпункт New Project. 
      
       
      
      В появившемся диалоге необходимо заполнить следующие пункты:
      -	Project Name
      В этом пункте указывается имя нового проекта.
      -	Location
      Здесь необходимо указать имя файла, в котором будет храниться информация о 
проекте.
      -	Initial Diagram
      Необходимо выбрать диаграмму, с которой начнется моделирование. 
Рекомендуется выбрать Use Case (Варианты использования).
      -	Default Language
      В этом пункте необходимо выбрать язык программирования, на котором будет 
генерироваться исходный код смоделированной программы.
      
      После того как все пункты заполнены, необходимо нажать на клавишу Ok.
      
      Создание новой диаграммы
      
      Для того, чтобы добавить ещё одну диаграмму в проект необходимо в меню (1) 
выбрать пункт File и подпункт New Diagram. После чего появится диалог, предлагающий 
выбрать тип диаграммы:
       
      
      Доступны следующие типы диаграмм:
      -	Class (Диаграмма Классов)
      -	Use Case (Диаграмма Вариантов Использования)
      -	Sequence (Диаграмма Взаимодействия)
      -	Collaboration (Диаграммы Кооперации)
      -	State chart (Диаграмма Состояний)
      -	Activity (Диаграмма Деятельности)
      -	Business Process (Диаграмма Бизнес Процессов)
      -	Component (Диаграмма Компонент)
      -	Deployment (Диаграмма Размещения)
      -	Entity Relationship (Диаграмма Сущность-Связь)
      
      Так же необходимо указать имя диаграммы (Name), пакет, в который она будет 
включена (Package), и ввести описание диаграммы (Description).
      После того как все пункты заполнены, необходимо нажать на клавишу Ok.
      
      


      Панели инструментов различных диаграмм
      


 
 
 
 
 
 
 
 
Инструмент «Указатель». Служит для 
выделения объектов на диаграмме для 
последующего редактирования, а так же 
для их перемещения. Если щёлкнуть 
правой кнопкой мыши по объекту то 
появится меню, с помощью которого 
можно редактировать свойства объекта.
Да
Да
Да
Да
Да
Да
Да
 
Действующее лицо. Что бы создать 
«действующее лицо» в поле диаграммы, 
выберите данный инструмент и 
щёлкните левой кнопкой по диаграмме.
Да

Да
Да



 
Вариант использования. Действия 
аналогичны предыдущему пункту.
Да






 
Связь «Наследование». Что бы соединить 
связью «Наследование» два варианта 
использования, необходимо сначала 
нажать левую кнопку мыши над 
вариантом-наследником, а потом, не 
отпуская кнопки, перевести указатель 
мышки на вариант-родитель, после чего 
отпустить кнопку.
Да






 
Связь «Включение». Действия 
аналогичны предыдущему пункту. 
Мышка проводится от включающего 
варианта к включаемому.
Да






 
Коммуникация. Коммуникацией 
соединяются варианты использования и 
действующие лица.
Да






 
Наследование. Наследованием 
соединяются объекты потомки с 
объектами родителями. Сначала 
указывается потомок, потом родитель.
Да
Да





 
Границы системы. Границы системы 
изображаются в виде прямоугольной 
области. Варианты использования можно 
помещать внутрь данной области либо в 
момент создания варианта, либо 
перемещением с помощью инструмента 
«Указатель».
Да






 
Комментарий. Блок текста, поясняющего 
какой-либо элемент диаграммы.
Да
Да
Да
Да
Да
Да
Да
 
Связь между комментарием и элементом 
диаграммы.
Да
Да
Да
Да
Да
Да
Да
 
Пакет. Создаёт пакет в поле диаграммы 
классов. Пакеты могут быть связаны 
между собой зависимостями.

Да





 
Класс. Создаёт класс на диаграмме. 
Чтобы добавить или изменить атрибуты и 
методы класса, необходимо щёлкнуть 
правой кнопкой мыши по изображению 
класса и выбрать нужное действие в 
появившемся меню.

Да





 
Интерфейс. Создаёт интерфейс на 
диаграмме. Действия аналогичны 
классам.

Да





 
Класс по шаблону. Создаёт класс по 
шаблону, который можно выбрать в 
диалоге появляющемся при размещении 
класса в поле диаграммы.

Да





 
Ассоциация. Связывает между собой два 
элемента диаграммы. Чтобы провести 
ассоциацию, необходимо нажать левую 
кнопку мыши в поле первого объекта и, 
не отпуская, провести указатель до 
попадания в поле второго объекта, после 
чего отпустить кнопку. Для 
редактирования параметров ассоциации 
необходимо её выбрать, после чего в поле 
редактора атрибутов появятся её 
свойства.

Да

Да


Да
 
Агрегация. Действия аналогичны 
ассоциации.

Да

Да


Да
 
Ассоциация по шаблону. Создаёт 
ассоциацию по заранее определённому 
шаблону.

Да





 
Зависимость. Создаёт изображение 
зависимости между двумя элементами 
диаграммы. Линия проводится от 
зависимого объекта.

Да

Да

Да
Да
 
Объект. Создаёт изображение объекта в 
поле диаграммы.

Да


Да
Да
Да
 
Объект. Создаёт изображение объекта в 
поле диаграмм взаимодействия и 
кооперации.


Да
Да



 
Сообщение. Создаёт изображение 
посылки сообщения от посылающего 
элемента диаграммы к получателю 
сообщения.


Да
Да



 
Сообщение с временем доставки. 
Отличается от обычного сообщения 
возможностью указывать время его 
доставки.


Да




 
Сообщение самому себе. Создаёт 
изображение посылки сообщения от 
элемента диаграммы к самому себе. Для 
его создания необходимо щёлкнуть 
мышкой по выбранному элементу 
диаграммы.


Да
Да



 
Состояние.




Да
Да

 
Начальное состояние.




Да
Да

 
Конечное состояние.




Да
Да

 
История. Помещается в поле состояния.




Да
Да

 
Горизонтальное ветвление 
/синхронизация. Изображается в виде 
горизонтальной линии, которая может 
получать сообщения или наоборот 
посылать.




Да
Да

 
Вертикальное ветвление/синхронизация. 
Изображается в виде вертикальной 
линии, которая может получать 
сообщения или, наоборот, посылать.




Да
Да

 
Сообщение.




Да
Да

 
Активность.





Да

 
Ветвление.





Да

 
Получатель сигнала.





Да

 
Отправитель сигнала.





Да

 
Узел. Может содержать внутри своего 
поля компоненты и интерфейсы.






Да
 
Компонент.






Да
 
Интерфейс.






Да
 
Ассоциация для интерфейсов.






Да
      
      
     

Приложение С. Пример решения учебной задачи
      
      Чтобы более наглядно продемонстрировать использование рассматриваемых 
методологий, изложение теоретического материала проиллюстрируем решением 
типичного задания курсового проекта. 
      В настоящее время, графические нотации моделирования программных систем 
широко применяются в различных CASE средствах. Поэтому, вполне логично, что мы 
предлагаем моделирование CASE средства в качестве примера. Конечно, же в рамках 
данного пособия невозможно спроектировать полноценную CASE систему с достаточной 
степенью детализации. Мы будем рассматривать только наиболее характерные базовые 
функции, не углубляясь в нюансы. Целевая система должна поддерживать только часть 
жизненных фаз ПС. 
      Перейдём к постановке задачи.
      Необходимо спроектировать систему поддержки разработки программ, 
отвечающую следующим требованиям:
      -	наличие средств визуального моделирования ПО;
      -	поддержка работы коллектива разработчиков;
      -	наличие средств автоматического создания документации;
      -	наличие средств генерации исходного текста (шаблона исходного текста) 
результирующей программы;
      
      Проект системы должен включать в себя:
      -	функциональную SADT модель использования CASE-системы для разработки 
ПС. Цель – уяснить технологию разработки, выявить основные функциональные 
подсистемы и их взаимосвязь. 
      -	Объектную модель системы на языке UML, включающую в себя следующие 
типы диаграммы: Классов - для описания статического аспекта системы, Пакетов – для 
описания иерархии компонент системы, Взаимодействия, Деятельности и Состояний – 
для описания динамических аспектов системы и Размещения – для описания топологии 
системы.
      
      
      
      
      Комментарии к диаграммам:
      
      Точка зрения – разработчиков ПС.
      
      Контекстная диаграмма ”Разработать ПС” (ПС/A-0).
      
      Описывает разработку ПС наиболее обобщенным образом.
 
Информация о предметной области – представлена в виде неформализованных 
описаний.
      Извлечение экспертных знаний о предметной области не входит в набор функций 
разрабатываемой CASE-системы и, поэтому, лежит за пределами модели.
      
      ТЗ - техническое задание – предполагается уже утвержденным.
      
      Методология разработки – предполагается, что разработчиками принята 
некоторая методология, поддерживаемая проектируемой CASE-системой. Эта 
методология включает, в частности, построение функциональной, статической и 
динамической моделей ПС. Поскольку методология разработки оказывает управляющее 
воздействие на все блоки модели, для удобства чтения диаграмм она “убрана в туннель”.
      
      CASE-система – механизм, автоматизирующий разработку ПС. Вся модель и 
строится только для того, чтобы выявить составные части проектируемой CASE-системы 
и технологию ее применения при разработке ПС.
      

Диаграмма ”Разработать ПС” (ПС/A0).
      
      Описывает разработку ПС как итерационный процесс.
 
      Под спецификациями понимаются детальные формальные описания интерфейсов 
компонент ПС.
      Модель ПС – подробно описывает функционирование системы, ее структуру и 
взаимодействие компонент.
      Тестировщики – среди тестировщиков допускается наличие представителей 
Заказчика, внедренных в коллектив разработчиков.
      
      


      Диаграмма ”Проектировать” (ПС/A1).
      Описывает последовательность разработки моделей ПС и их взаимосвязь.
      
 
      Туннельные дуги управления ТЗ и дуги механизмов аналитики и CASE-система 
родительской диаграммы относятся ко всем блокам.
      
      Модель ПС – совокупность функциональной (предварительное описание), 
статической, динамической моделей и модели развертывания ПС. 
      
      Функциональная модель ПС служит основой для построения объектных 
статической (описывающей структуру ПС) и динамической (описывающей поведение 
ПС) моделей. 
      
      В результате анализа замечаний по итогам тестирования могут быть внесены 
изменения в проект, касающихся различных моделей ПС.
      
      Моделировать развертывание ПС – предполагается, что информации о 
предметной области и данных ТЗ достаточно для принятия решения о топологии 
системы.
      
      


      Диаграмма ”Построить функциональную модель ПС” (ПС/A11).

      Описывает создание модели, как набора диаграмм. Описание типа диаграмм и 
графическая нотация для их записи содержатся в принятой методологии разработки. 
Это могут быть, например, SADT- диаграммы.
      
 
      


      Диаграмма ”Построить/изменить диаграмму” (ПС/A112).
      
      Детализирует один из блоков создания функциональной модели, но может быть 
использована как описание создания диаграмм и для остальных моделей.
 
      За хранение и целостность модели отвечает сервер моделей CASE-системы, 
создание и редактирование диаграмм производится компонентой визуального 
моделирования, функционирующей на клиентской части.
      


      Диаграмма ”Построить статическую модель ПС” (ПС/A12).
      
      Раскрывает этапы создания объектной модели ПС, как последовательность 
наборов диаграмм классов от концептуального уровня до уровня спецификаций. 
Диаграммы классов могут быть написаны, например, на языке UML.
 
      
      

Диаграмма ”Построить динамическую модель ПС” (ПС/A13).
      
      Описывает последовательность создания динамической модели ПС на основе 
функциональной и статической моделей, ТЗ и информации о предметной области.
 
      Побочными результатами построения динамической модели могут быть изменения 
в функциональную и статическую модели ПС. Механизмами для всех блоков диаграммы 
являются аналитики и CASE-система, туннелированные на диаграмме ПС/A0.
      
      
      

Диаграмма ”Кодировать” (ПС/A2).
      
      Описывает процесс кодирования программных компонент, существенно 
использующий возможности CASE-системы. 
 
      CASE-система должна обеспечивать кодогенерацию прототипов программных 
компонент, которые впоследствии подлежат ручному дописыванию. CASE-система 
должна также поддерживает автодокументирование исходных текстов
      
      Под интегрированием компонент ПС понимается сборка загрузочных модулей, 
формирования и инсталляция пригодной для тестирования версии ПС.
      
      

Диаграмма ”Анализировать замечания по итогам тестирования” (ПС/A14).
      
      Показывает последовательность создания пакета изменений в проект на основе 
замечаний по итогам тестирования, с использованием возможности реверс-
инжениринга, предоставляемой CASE-системой. 
 
      	Реверс-инжениринг в данном случае представляет собой процесс 
воссоздания модели ПС по исходным текстам программных компонент и сравнительный 
анализ исходной и воссозданной моделей.
      	При оценке возможности внесения изменений в проект основными 
критериями являются степень необходимости внесения изменения для 
функционирования ПС (необходимо, желательно, может быть реализовано в 
последующих версиях), а также временная и денежная стоимость внесения изменения.
      
      
      
      
      
      
      
      
      
      
      
 
      Дерево диаграмм SADT-модели.



Описание диаграмм UML
      
Диаграмма использования

 
      
      Данная диаграмма показывает процесс функционирования системы с точки зрения 
её пользователя, то есть в данном случае разработчика ПО. На ней изображены два типа 
действующих лиц:
      -	Разработчик
      Группа программистов занимающихся созданием программ.
      -	Система программирования
      Пакет программ предназначенный для написания программного кода, 
компиляции, отладки и тестирования. 
       Разработчик взаимодействует со следующими вариантами использования:
      -	Проектировать
      Процесс проектирования ПО будет автоматизироваться с помощью нашей 
системы. Он будет состоять из следующих подпроцессов:
      *	Построить статическую модель,
      *	Построить динамическую модель,
      *	Построить функциональную модель,
      *	Моделировать развёртывание.
      Все эти процессы можно рассматривать как некоторые модификации процесса 
моделирования. Это изображается на диаграмме в виде  связи «расширения» этих 
вариантов использования  с вариантом использования «Моделировать».
      -	Тестировать и отлаживать
      Тестирование и отладка программы, построенной с помощью нашей системы 
происходит с помощью внешней системы программирования, что и отображается на 
диаграмме в виде связи варианта использования «Тестировать и отлаживать» с 
действующим лицом «Система программирования»
      -	Кодировать
      Процесс кодирования будет автоматизироваться в нашей системе частично. Он 
включает в себя следующие основные подпроцессы:
      *	Выполнить кодогенерацию подсистем
      По созданной на этапе проектирования модели  будет создаваться шаблон 
исходного кода результирующей программы.
      *	Дописать код подсистем вручную
      С помощью внешней системы программирования разработчик должен будет 
дописать исходный код программы, руководствуясь построенными моделями.
      *	Интегрировать компоненты
      Здесь различные компоненты написанной программы соединяются в единую 
программную систему.
      *	Сгенерировать программную документацию
      По построенной модели программы автоматически генерируется её документация.
      
Диаграмма классов
 

      На данной диаграмме отображены основные классы разрабатываемой системы и 
связи между ними.
      Класс «Интерфейс» отвечает за взаимодействие с пользователем. Он ссылается на 
множество классов «Профиль пользователя», содержащих информацию о пользователях 
системы. «Интерфейс» также ссылается на множество объектов класса «Хранилище», 
каждый из которых представляет из себя некоторое хранилище для построенных моделей 
разрабатываемой программы. 
      «Хранилище» ссылается на класс «Словарь», предназначенный для 
структурированного хранения описаний всех элементов построенных моделей. Он 
содержит в себе множество экземпляров класса «Запись», состоящих из ссылки на тот или 
иной элемент модели и документации по этому элементу. Документация представляется 
экземпляром класса «Документация», а элемент модели экземпляром класса 
«МетаСущность».
      «Хранилище» также ссылается на множество объектов класса «Модель», 
представляющих модели различных аспектов программы. Класс «модель» имеет 
несколько наследников:
      -	Статическая модель
      -	Динамическая модель
      -	Функциональная модель
      -	Модель развёртывания
      Каждый из этих классов является конкретизацией общего класса «Модель» для 
моделирования соответствующего аспекта программы.
      Каждая модель состоит из двух частей. Первая – это «Документация модели». 
Объект данного класса содержит описание всей модели в целом, а так же ссылки на 
описания её элементов, хранящихся в объектах класса «Документация». Вторая – это 
визуальное представление модели в классе «Диаграмма». Каждая диаграмма содержит два 
типа элементов – это сущности и связи между ними. Сущности и связи представлены на 
диаграмме с помощью одноимённых классов. Класс «Диаграмма» ссылается на класс 
«Сущность», который в свою очередь ссылается на класс «Связь». Каждый из элементов 
диаграммы обладает некоторой позицией на экране. Для хранения информации о 
позиции, каждый из элементов ссылается на соответствующий ему экземпляр класса 
«Позиция». Каждый элемент модели ссылается также на соответствующие ему описание, 
реализованное в экземпляре класса «Документация». 
      Оба класса «Сущность» и «Связь» являются наследниками класса 
«Метасущность».
      
Диаграмма последовательностей
      
 

      На диаграмме последовательностей изображен процесс редактирования некоторой 
диаграммы.
      Вначале необходимо получит доступ к редактируемой модели, это делается 
вызовом метода «получитьДоступКМодели» у экземпляра класса «Хранилище». После 
этого необходимо получить доступ к соответствующей диаграмме, это делается вызовом 
метода «получитьДоступКДиаграмме» экземпляра класса «Модель».
      Если необходимо добавить некоторую сущность к существующей диаграмме, то у 
экземпляра класса «Диаграмма» вызывается метод «добавитьСущность». Который, в свою 
очередь, вызывает метод для создания новой записи в словаре данных, это делается 
вызовом «добавитьЗапись» у объекта класса «Словарь».
      Если необходимо создать связь между сущностями диаграммы, то вызывается 
метод «добавитьСвязь» у экземпляра класса «Диаграмма». Далее, аналогичным образом 
вызывается метод «добавитьЗапись» у объекта класса «Словарь». После чего 
производится привязка объекта «Связь» к объектам «Сущность»; для этого производится 
вызов метода «установитьСущность» у объекта «Связь» и методов «добавитьСвязь» у 
соответствующих объектов класса «Сущность».
      Если необходимо изменить позицию какого-либо элемента диаграммы, то 
вызывается метод «форматироватьДиаграмму» объекта класса «Диаграмма». После чего 
необходимо получить доступ к объекту класса «Позиция» соответствующего элемента 
посредством вызова метода «узнатьПозицию». Затем можно изменить позицию привязки 
элемента диаграммы на экране вызовом метода «изменитьКоординаты».
      
Диаграмма взаимодействия
 

      На диаграмме взаимодействия изображена последовательность взаимодействия 
объектов в системе при создании документации.
      Отправной точкой для создания документации является объект класса 
«Интерфейс». Редактирование документации может происходить двумя способами:
      1. При редактировании диаграммы.
      Для этого сначала производится вызов метода хранилища для получения объекта 
модели, из которого извлекается необходимая диаграмма. Далее запрашивается 
«Сущность», документацию которой мы хотим редактировать. И, в случае, если 
необходимо редактировать документацию связи, запрашивается «Связь». После чего у 
полученного элемента модели запрашивается ссылка на его документацию.
      2. При редактировании словаря.
      В этом случае, мы сначала  обращаемся к словарю для получения интересующей 
нас записи, после чего получаем объект-документацию, подлежащий редактированию.
      
Диаграмма состояний
      
 

      На диаграмме состояний отображен процесс кодогенерации шаблона исходного 
текста системы.
      Вначале идёт проверка диаграммы на корректность. Если были найдены какие-
либо ошибки, то происходит переход в состояние «Отображение ошибок», в котором 
пользователю выдается список ошибок, после чего процесс кодогенерации завершается.
      Если диаграмма корректна, то мы начинаем последовательно перебирать 
Сущности системы. При этом сначала переходим к состоянию «Поиск следующей 
сущности». В нём мы ищем следующую сущность, не прошедшую обработку. Если 
таковой не найдено, то процесс завершается. В противном случае осуществляется 
проверка сущности на корректность. Если сущность содержит в себе ошибки, то 
происходит переход в состояние «Отображение ошибок». Если же сущность корректна, 
то производится генерация шаблона кода и переход к генерации шаблонов связей данной 
сущности. Для этого производится переход в состояние «Поиск следующей связи». В 
этом состоянии ищется следующая связь данной сущности, не прошедшая пока обработку. 
Если таковых нет, то мы переходим к обработке следующей сущности. Иначе 
производится «проверка связи». Если связь ошибочна, то мы переходим в состояние 
«Отображение ошибок», иначе производится «внесение в исходный код шаблона связи», 
и переход в состояние «Поиск следующей связи».
      
Диаграмма действия
      
 
      На данной диаграмме изображается процесс редактирования диаграммы модели. В 
диаграмме присутствуют две «плавательные дорожки». Это редактор диаграмм и 
хранилище диаграмм.
      Редактирование должно начинаться с «Выбора модели» в редакторе диаграмм, 
после чего выбранная модель извлекается из хранилища и передаётся редактору, в 
котором производится выбор элемента для редактирования. Редактируемый элемент 
запрашивается из словаря данных. При этом сам элемент (это может быть как сущность, 
так и связь), может редактироваться одновременно с документацией. Этому 
соответствуют параллельные действия «Редактировать элемент» и «Редактировать 
документацию». После редактирования они вместе сохраняются в словаре. Далее можно 
перейти к редактированию следующего элемента. Когда редактирование заканчивается, 
то происходит переход к действию «Сохранить модель».
      
Диаграмма размещения
      
 
      Разрабатываемая система является системой клиент/сервер, в которой данные о 
моделях хранятся на централизованном сервере, а работа с моделями происходит на 
клиентах. Клиенты связываются с сервером с помощью сети на базе протокола TCP/IP.
      Сервер состоит из двух компонент:
      -	Базы данных, в которой хранятся модели и их описания.
      -	Непосредственно серверного ПО, регламентирующего взаимодействие  с 
клиентами.
      Клиент состоит из:
      -	Клиентского ПО, предназначенного для взаимодействия с сервером, а 
также для автоматизированной обработки диаграмм.
      -	Редакторов диаграмм, предназначенных для создания, отображения и 
модификации диаграмм (статических, динамических, функциональных и развёртывания).
      -	Системы программирования, предназначенной для кодирования, отладки и 
тестирования программы сгенерированной Клиентским ПО.
      -	Редактора документов  для работы со сгенерированной документацией.
      
      


      ЛИТЕРАТУРА
      
1. Жоголев Е.А. Введение в технологию программирования. - М.: ДИАЛОГ-МГУ, 1994.
2. Бадд Т. Объектно-ориентированное программирование в действии –СПб.: Питер, 1997
3. Марка Д., МакГоуэн К. Методология структурного анализа и проектирования SADT. - 
M.: МетаТехнология, 1993
4. Буч Г. Объектно-ориентированное проектирование с примерами приложений на С++. - 
М.: Издательство Бином, СПб.: Невский диалект, 1999
5. Калянов Г. Н., Козлинский А. В., Лебедев В.Н. Сравнительный анализ структурных 
методологий. http://www.osp.ru/dbms/1997/05-06/75.htm
6. Калянов Г. Н. CASE-структурный системный анализ. М.: Лори, 1996.
7. Йордан Э. Как выжить в безнадежном проекте. М.: Лори, 2001.
8. Брукс Ф. Мифический человеко-месяц или как создаются программные системы. СПб.: 
Символ-Плюс, 1999.
9.  Гайсарян C.C. Объектно-ориентированные технологии проектирования прикладных 
программных систем. Центр информационных технологий. 
http://www.citforum.ru/programming/oop_rsis/index.shtml
10. Вендров А.М.. CASE-технологии. Современные методы и средства проектирования 
информационных систем. М.: Финансы и статистика, 1998.
11. Маклаков С.В. BPwin и ERwin. CASE-средства разработки информационных систем. 
М.: ДИАЛОГ-МИФИ, 2000





Дзюба Д.В., Крылов С.С. Автоматизированное моделирование программных систем.




